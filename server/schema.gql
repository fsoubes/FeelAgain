# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Adress {
  city: String
  country: String
  delivery: DeliveryType!
  email: String
  line1: String
  line2: String
  name: String
  phone: String
  postal_code: String
}

type Basket {
  _id: ObjectId!
  products: [CartItem!]!
  total: Float
  user: User!
}

type Blog {
  _id: ObjectId!
  article: String
  author: User!
  authRating: String
  comments: [Comments!]
  createdAt: String!
  description: String
  downRating: [User!]!
  image_back: String
  image_url: String
  is_published: Boolean
  positiveRating: Float!
  social: [String!]!
  source: [String!]!
  tags: String
  title: String!
  totalVoting: Float!
  updatedAt: DateTime!
  upRating: [User!]!
}

input BlogInput {
  article: String
  description: String
  image_back: String
  image_url: String
  is_published: Boolean
  social: [String!]
  source: [String!]
  tags: String
  title: String!
}

input CardInput {
  from: String
  message: String
  price: RangeGift
  to: String
}

type CartItem {
  _id: ObjectId!
  card: GiftCard
  comments: Comments
  order: Boolean
  quantity: Float
  user: String!
  variant: Variants!
}

input CommentInput {
  comment: String
  score: Float
  title: String
}

type Comments {
  _id: ObjectId!
  article: Blog
  author: User!
  comment: String
  createdAt: DateTime!
  is_recommanding: Boolean
  product: Shoes
  recommanded: [User!]!
  recommanded_by: Float
  score: Float
  title: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""type of payment"""
enum DeliveryType {
  Home
  Pickup
}

input DetailsInput {
  amount: String
  city: String
  country: String
  delivery: DeliveryType
  email: String
  last_four: String
  line1: String
  line2: String
  name: String
  payment_method: PaymentType
  phone: String
  postal_code: String
}

type FieldError {
  field: String!
  message: String!
}

type GiftCard {
  _id: ObjectId!
  buyer: User!
  from: String!
  message: String
  price: Float!
  to: String!
  used: Boolean!
}

input ImageInput {
  height: Float
  position: Float
  product_id: String
  src: String
  width: Float
}

type Images {
  _id: ObjectId!
  height: Float
  position: Float!
  product_id: String!
  src: String!
  width: Float
}

type Mutation {
  addArticle(blog: BlogInput!): Blog!
  addCartItem(variantId: String!): CartItem!
  addComment(articleId: String!, comment: String!): String!
  addGiftCardItem(card: CardInput!): CartItem!
  addGuestCart(isArg: Boolean!): Boolean!
  addImage(image: ImageInput!, parentId: String!): String!
  addPayment(details: DetailsInput!, stripeId: String!): String!
  addPayPalPayment(details: DetailsInput!, paypalId: String!): String!
  addRecommendation(commentId: String!): String!
  addRelation: Boolean!
  addReview(comments: CommentInput!, itemId: String!, reviewId: String, shoesId: String!): String!
  addShoe(shoes: ShoesInput!): ObjectId!
  addShoes: Boolean!
  addToNewsletter(email: String!): Boolean!
  addVariant(parentId: String!, variant: VariantInput!): String!
  changePassword(newPassword: String!, token: String!): UserResponse!
  forgotPassword(email: String!): Boolean!
  incrementCountView(shoeId: String!): Boolean!
  login(user: UserLogin!): UserResponse!
  logout: Boolean!
  mergeGuestCart(isArg: Boolean!): Boolean!
  ratingReview(articleId: String!, rating: String!): Boolean!
  refundOrder(orderId: String!, total: Float!, updated: [String!]!): String!
  register(user: UserRegister!): UserResponse!
  removeCartItem(basketId: String!, itemId: String!, quantity: Float!): String!
  removeShoe(shoeId: String!): String!
  sendContact(content: String!, email: String!, name: String!): Boolean!
  sendNewsletter: Boolean!
  updateArticle(blog: BlogInput!, blogId: String!): Blog!
  updateCartItem(itemId: String!, quantity: Float!): String!
  updateImage(image: ImageInput!, imageId: String!): Images!
  updateShoe(shoeId: String!, shoes: ShoesInput!): Shoes!
  updateVariant(variant: VariantInput!, variantId: String!): Variants!
}

type Newsletter {
  _id: ObjectId!
  email: [String!]!
  type: String!
  users: [User!]!
}

"""Mongo object id scalar type"""
scalar ObjectId

type OptionShoes {
  name: String!
  position: String!
  values: [String!]!
}

type Orders {
  _id: ObjectId!
  adress: Adress!
  createdAt: DateTime!
  last_four: String
  payment_intent: String!
  payment_method: PaymentType!
  products: [CartItem!]!
  purchases: [Purchases!]!
  status: String!
  timeline: Float!
  total: Float!
  tracking: String
  user: User!
}

type PaginatedBlogResponse {
  edges: [Blog!]!
  pageInfo: PaginationInfo!
}

type PaginatedCommentsResponse {
  edges: [Comments!]!
  pageInfo: PaginationInfo!
}

type PaginationInfo {
  endCursor: String
  hasNextPage: Boolean
}

type PaginationPage {
  current: Float
  total: Float
  totalItem: Float
}

type PaginationShoes {
  edges: [Shoes!]!
  pageInfo: PaginationPage!
}

"""type of payment"""
enum PaymentType {
  PayPal
  Stripe
}

type Purchases {
  _id: ObjectId!
  comment: Comments
  owner: User!
  product: Variants!
}

type Query {
  getAllBasket: [Basket!]!
  getAllOrderProducts: [CartItem!]!
  getAllOrders: [Orders!]!
  getArticleComments(articleId: String!, cursor: String, limit: Float!): PaginatedCommentsResponse!
  getArticles(cursor: String, limit: Float!): PaginatedBlogResponse!
  getBasket: Basket!
  getCartItems: [CartItem!]!
  getClosestArticles(tags: String!, title: String!): [Blog!]!
  getClosestShoes(product: String!, title: String!): [Shoes!]!
  getFilterShoes(filter: ShoesInputFilter, is_published: Boolean = true, limit: Float!, page: Float!, search: String, sort: String): PaginationShoes!
  getNewsletter: Newsletter!
  getOrder(orderId: String!): Orders!
  getOrders: [Orders!]!
  getPurchases: [Purchases!]!
  getReview(shoesId: String!): Comments!
  getShoesByName(search: String!): SearchResults!
  getSingleArticle(articleId: ObjectId!): Blog!
  getSingleShoe(shoesId: ObjectId!): Shoes!
  me: User
  userRole: Boolean!
}

"""gift card payment"""
enum RangeGift {
  card_100
  card_125
  card_150
  card_175
  card_200
  card_25
  card_50
  card_75
}

type SearchResults {
  edges: [Shoes!]!
  totalCount: Float!
}

type Shoes {
  _id: ObjectId!
  body_html: String!
  bought_by: Float!
  comments: [Comments!]!
  createdAt: DateTime!
  handle: String!
  images: [Images!]!
  is_published: Boolean!
  options: [OptionShoes!]!
  price: Float!
  product_type: String!
  relatives: [Shoes!]!
  score: Float!
  score_1: Float!
  score_2: Float!
  score_3: Float!
  score_4: Float!
  score_5: Float!
  scored_by: Float!
  size: [Float!]!
  switchTitle: [String!]!
  tags: [String!]!
  title: String!
  updatedAt: DateTime!
  variants: [Variants!]!
  vendor: String!
  visited_by: Float!
}

input ShoesInput {
  body_html: String
  handle: String
  is_published: Boolean
  price: Float
  product_type: String
  relatives: [String!]
  size: [Float!]
  tags: [String!]
  title: String
  vendor: String
}

input ShoesInputFilter {
  is_published: Boolean
  product: String
  size: [Float!]
  tags: [String!]
}

type User {
  _id: ObjectId!
  basket: Basket!
  createdAt: DateTime!
  customer_id: String!
  email: String!
  facebook_id: String!
  google_id: String!
  items: Float
  nickname: String!
  twitter_id: String!
  updatedAt: DateTime!
}

input UserLogin {
  email: String!
  password: String!
}

input UserRegister {
  email: String!
  nickname: String!
  password: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

input VariantInput {
  available: Boolean
  compare_at_price: Float
  featured_image: String
  grams: Float
  price: Float
  product_id: String
  quantity: Float
  sku: String
  title: String
}

type Variants {
  _id: ObjectId!
  available: String!
  compare_at_price: Float!
  featured_image: String
  grams: Float!
  option1: String!
  option2: String!
  option3: String!
  price: Float!
  product_id: String!
  quantity: Float!
  shoes: Shoes!
  sku: String!
  title: String!
}
