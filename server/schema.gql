# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Blog {
  _id: ObjectId!
  article: String
  author: User!
  authRating: String
  comments: Comment!
  createdAt: String!
  description: String
  downRating: [User!]!
  image_url: String
  isPublished: Boolean
  positiveRating: Float!
  social: [String!]!
  source: [String!]!
  tags: [String!]!
  title: String!
  totalVoting: Float!
  updatedAt: DateTime!
  upRating: [User!]!
}

input BlogInput {
  article: String
  description: String
  image_url: String
  isPublished: Boolean
  social: [String!]
  source: [String!]
  tags: [String!]
  title: String!
}

type Comment {
  _id: ObjectId!
  author: User!
  message: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FieldError {
  field: String!
  message: String!
}

type Mutation {
  addArticle(blog: BlogInput!): Blog!
  addShoes: Boolean!
  changePassword(newPassword: String!, token: String!): UserResponse!
  forgotPassword(email: String!): Boolean!
  login(user: UserLogin!): UserResponse!
  logout: Boolean!
  ratingReview(articleId: String!, rating: String!): Boolean!
  register(user: UserRegister!): UserResponse!
  test2(isArg: Boolean!): Boolean!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PaginationInfo {
  endCursor: String
  hasNextPage: Boolean
}

type PaginationResponse {
  edges: [Blog!]!
  pageInfo: PaginationInfo!
}

type Query {
  getArticles(cursor: String, limit: Float!): PaginationResponse!
  getSingleArticle(articleId: ObjectId!): Blog!
  getSingleShoe(articleId: ObjectId!): Boolean!
  me: User
}

type User {
  _id: ObjectId!
  createdAt: DateTime!
  email: String!
  nickname: String!
  updatedAt: DateTime!
}

input UserLogin {
  email: String!
  password: String!
}

input UserRegister {
  email: String!
  nickname: String!
  password: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}
